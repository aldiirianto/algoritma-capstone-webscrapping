# -*- coding: utf-8 -*-
"""Capstone - Data Analytics Specialization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1f8DxLL96ZGu_RFh0hz0r90e3gkc2BFtw

##**Capstone Webscrapping with BeautifulSoup**
  - Pada kesempatan kali ini, dilakukan proses webscrapping sederhana dari situs https://www.exchange-rates.org/history/IDR/USD/T untuk kemudian diolah dan dianalisis menjadi suatu visualisasi data.
  
  - Tujuan dilakukannya untuk menyelesaikan tugas Capstone - Data Analytics Specialization by Algoritma Academy.

**Requesting the Data and Creating the BeautifulSoup**
"""
from flask import Flask, render_template
import pandas as pdpip
import matplotlib
import matplotlib.pyplot as plt
from io import BytesIO
import base64
from bs4 import BeautifulSoup 
import requests

#don't change this
matplotlib.use('Agg')
app = Flask(__name__) #do not change this

url_get = requests.get('https://www.coingecko.com/en/coins/ethereum/historical_data#panel')
soup = BeautifulSoup(url_get.content,"html.parser")


"""**Finding the right key to scrap the data & Extracting the right information**"""

table = soup.find('table', attrs={'class':'table table-striped text-sm text-lg-normal'})

"""finding row length"""

date = table.find_all('th', attrs={'class':'font-semibold text-center'})
date

date[0].text

row_length = len(date)
row_length

market_cap = table.find_all('td', attrs={'class':'text-center'})
market_cap

"""the scrapping process here"""

temp = [] #initiating a tuple

for i in range(0, row_length):

    #scrapping process
    #get period
    date = table.find_all('th', attrs={'class':'font-semibold text-center'})[i].text
    volume = table.find_all('td', attrs={'class':'text-center'})[1].text.strip('\n')

    temp.append((date, volume))
    
temp

"""**Creating data frame & Data wrangling**"""

df = pd.DataFrame(temp, columns = ('date', 'volume (USD)'))
df.head()

df.dtypes

"""the data cleaning here"""

df['volume (USD)'] = df['volume (USD)'].str.replace('[$|,]', '', regex=True)

df

df['volume (USD)'] = df['volume (USD)'].astype('float64')

df.dtypes

df = df.set_index('date')

df.plot()

@app.route("/")
def index(): 
	
	card_data = f'{df["volume (USD)"].mean().round(2)}' #be careful with the " and ' 

	# generate plot
	ax = ____.plot(figsize = (20,9)) 
	
	# Rendering plot
	# Do not change this
	figfile = BytesIO()
	plt.savefig(figfile, format='png', transparent=True)
	figfile.seek(0)
	figdata_png = base64.b64encode(figfile.getvalue())
	plot_result = str(figdata_png)[2:-1]

	# render to html
	return render_template('index.html',
		card_data = card_data, 
		plot_result=plot_result
		)


if __name__ == "__main__": 
    app.run(debug=True)